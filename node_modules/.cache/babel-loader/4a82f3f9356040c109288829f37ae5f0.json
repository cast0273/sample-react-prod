{"ast":null,"code":"var _jsxFileName = \"/Users/jc/Documents/code/MAD2021F/mad9135/in-class review/W6-2-HashRouter/week5-sample-react-app/src/components/Planets/Planets.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport Planet from '../Planet/Planet';\nimport './planets.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Planets(props) {\n  _s();\n\n  const [list, setList] = useState([]); //hooks return 2 things - variable, function to change the variable\n  //useState - for creating and updating variables inside state\n  //useEffect - for the rendering lifecycle\n\n  async function fetchData() {\n    let url = 'https://swapi.dev/api/planets';\n    let resp = await fetch(url);\n    let data = await resp.json();\n    setList(data.results); //new array being put into `list`\n    //changing a state variable tells react to look and see\n    //if something needs to be re-rendered\n  }\n\n  function findPlanet(id) {\n    return list.find((item, index) => parseInt(id) === index + 1); //return an object for the single planet\n  }\n\n  useEffect(() => {\n    //all useEffect functions run on the inital render of the component\n    console.log('useEffect was called.');\n    fetchData();\n  }, []); //here we are monitoring for changes to `name`\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planets\",\n    children: [list.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planet-list\",\n      children: list.map((item, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(NavLink, {\n          to: `/planets/${index + 1}`,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.terrain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, item.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planet-details\",\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/planets/:id\",\n        children: /*#__PURE__*/_jsxDEV(Planet, {\n          findPlanet: findPlanet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n} //logical short-circuiting\n// value && object\n//if value is true then the object is rendered\n//if value is false then the object is NOT rendered\n\n_s(Planets, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["/Users/jc/Documents/code/MAD2021F/mad9135/in-class review/W6-2-HashRouter/week5-sample-react-app/src/components/Planets/Planets.js"],"names":["useState","useEffect","Route","NavLink","Planet","Planets","props","list","setList","fetchData","url","resp","fetch","data","json","results","findPlanet","id","find","item","index","parseInt","console","log","length","map","name","terrain"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,kBAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,eAAP;;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC,CADsC,CAEtC;AACA;AACA;;AAEA,iBAAeS,SAAf,GAA4B;AAC1B,QAAIC,GAAG,GAAG,+BAAV;AACA,QAAIC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAtB;AACA,QAAIG,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAjB;AACAN,IAAAA,OAAO,CAACK,IAAI,CAACE,OAAN,CAAP,CAJ0B,CAIJ;AACtB;AACA;AACD;;AAED,WAASC,UAAT,CAAqBC,EAArB,EAAyB;AACvB,WAAOV,IAAI,CAACW,IAAL,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiBC,QAAQ,CAACJ,EAAD,CAAR,KAAiBG,KAAK,GAAG,CAApD,CAAP,CADuB,CAEvB;AACD;;AAEDnB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAd,IAAAA,SAAS;AACV,GAJQ,EAIN,EAJM,CAAT,CApBsC,CAwB/B;;AAEP,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,eACGF,IAAI,CAACiB,MAAL,KAAgB,CAAhB,iBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADxB,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGjB,IAAI,CAACkB,GAAL,CAAS,CAACN,IAAD,EAAOC,KAAP,kBACR;AAAA,gCACE,QAAC,OAAD;AAAS,UAAA,EAAE,EAAG,YAAWA,KAAK,GAAG,CAAE,EAAnC;AAAA,oBAAuCD,IAAI,CAACO;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOP,IAAI,CAACQ;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAQR,IAAI,CAACO,IAAb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,cAAZ;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,UAAU,EAAEV;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,C,CACD;AACA;AACA;AACA;;GAjDwBX,O;;KAAAA,O","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Route, NavLink } from 'react-router-dom'\nimport Planet from '../Planet/Planet'\nimport './planets.css'\n\nexport default function Planets (props) {\n  const [list, setList] = useState([])\n  //hooks return 2 things - variable, function to change the variable\n  //useState - for creating and updating variables inside state\n  //useEffect - for the rendering lifecycle\n\n  async function fetchData () {\n    let url = 'https://swapi.dev/api/planets'\n    let resp = await fetch(url)\n    let data = await resp.json()\n    setList(data.results) //new array being put into `list`\n    //changing a state variable tells react to look and see\n    //if something needs to be re-rendered\n  }\n\n  function findPlanet (id) {\n    return list.find((item, index) => parseInt(id) === index + 1)\n    //return an object for the single planet\n  }\n\n  useEffect(() => {\n    //all useEffect functions run on the inital render of the component\n    console.log('useEffect was called.')\n    fetchData()\n  }, []) //here we are monitoring for changes to `name`\n\n  return (\n    <div className='planets'>\n      {list.length === 0 && <p>Loading...</p>}\n      <div className='planet-list'>\n        {list.map((item, index) => (\n          <p key={item.name}>\n            <NavLink to={`/planets/${index + 1}`}>{item.name}</NavLink>\n            <span>{item.terrain}</span>\n          </p>\n        ))}\n      </div>\n\n      <div className='planet-details'>\n        <Route path='/planets/:id'>\n          <Planet findPlanet={findPlanet} />\n        </Route>\n      </div>\n    </div>\n  )\n}\n//logical short-circuiting\n// value && object\n//if value is true then the object is rendered\n//if value is false then the object is NOT rendered\n"]},"metadata":{},"sourceType":"module"}